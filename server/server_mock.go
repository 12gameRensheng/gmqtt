// Code generated by MockGen. DO NOT EDIT.
// Source: server/server.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	gmqtt "github.com/DrmagicE/gmqtt"
	retained "github.com/DrmagicE/gmqtt/retained"
	subscription "github.com/DrmagicE/gmqtt/subscription"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocktopicAliasMgrFactory is a mock of topicAliasMgrFactory interface
type MocktopicAliasMgrFactory struct {
	ctrl     *gomock.Controller
	recorder *MocktopicAliasMgrFactoryMockRecorder
}

// MocktopicAliasMgrFactoryMockRecorder is the mock recorder for MocktopicAliasMgrFactory
type MocktopicAliasMgrFactoryMockRecorder struct {
	mock *MocktopicAliasMgrFactory
}

// NewMocktopicAliasMgrFactory creates a new mock instance
func NewMocktopicAliasMgrFactory(ctrl *gomock.Controller) *MocktopicAliasMgrFactory {
	mock := &MocktopicAliasMgrFactory{ctrl: ctrl}
	mock.recorder = &MocktopicAliasMgrFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktopicAliasMgrFactory) EXPECT() *MocktopicAliasMgrFactoryMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MocktopicAliasMgrFactory) New() TopicAliasManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(TopicAliasManager)
	return ret0
}

// New indicates an expected call of New
func (mr *MocktopicAliasMgrFactoryMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MocktopicAliasMgrFactory)(nil).New))
}

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// SubscriptionStore mocks base method
func (m *MockServer) SubscriptionStore() subscription.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionStore")
	ret0, _ := ret[0].(subscription.Store)
	return ret0
}

// SubscriptionStore indicates an expected call of SubscriptionStore
func (mr *MockServerMockRecorder) SubscriptionStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionStore", reflect.TypeOf((*MockServer)(nil).SubscriptionStore))
}

// RetainedStore mocks base method
func (m *MockServer) RetainedStore() retained.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainedStore")
	ret0, _ := ret[0].(retained.Store)
	return ret0
}

// RetainedStore indicates an expected call of RetainedStore
func (mr *MockServerMockRecorder) RetainedStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainedStore", reflect.TypeOf((*MockServer)(nil).RetainedStore))
}

// PublishService mocks base method
func (m *MockServer) PublishService() PublishService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishService")
	ret0, _ := ret[0].(PublishService)
	return ret0
}

// PublishService indicates an expected call of PublishService
func (mr *MockServerMockRecorder) PublishService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishService", reflect.TypeOf((*MockServer)(nil).PublishService))
}

// Client mocks base method
func (m *MockServer) Client(clientID string) Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", clientID)
	ret0, _ := ret[0].(Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockServerMockRecorder) Client(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockServer)(nil).Client), clientID)
}

// GetConfig mocks base method
func (m *MockServer) GetConfig() Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockServerMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockServer)(nil).GetConfig))
}

// GetStatsManager mocks base method
func (m *MockServer) GetStatsManager() StatsManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsManager")
	ret0, _ := ret[0].(StatsManager)
	return ret0
}

// GetStatsManager indicates an expected call of GetStatsManager
func (mr *MockServerMockRecorder) GetStatsManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsManager", reflect.TypeOf((*MockServer)(nil).GetStatsManager))
}

// Stop mocks base method
func (m *MockServer) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockServerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop), ctx)
}

// ApplyConfig mocks base method
func (m *MockServer) ApplyConfig(config Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyConfig", config)
}

// ApplyConfig indicates an expected call of ApplyConfig
func (mr *MockServerMockRecorder) ApplyConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfig", reflect.TypeOf((*MockServer)(nil).ApplyConfig), config)
}

// MockPublishService is a mock of PublishService interface
type MockPublishService struct {
	ctrl     *gomock.Controller
	recorder *MockPublishServiceMockRecorder
}

// MockPublishServiceMockRecorder is the mock recorder for MockPublishService
type MockPublishServiceMockRecorder struct {
	mock *MockPublishService
}

// NewMockPublishService creates a new mock instance
func NewMockPublishService(ctrl *gomock.Controller) *MockPublishService {
	mock := &MockPublishService{ctrl: ctrl}
	mock.recorder = &MockPublishServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublishService) EXPECT() *MockPublishServiceMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPublishService) Publish(message *gmqtt.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", message)
}

// Publish indicates an expected call of Publish
func (mr *MockPublishServiceMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublishService)(nil).Publish), message)
}

// PublishToClient mocks base method
func (m *MockPublishService) PublishToClient(clientID string, message *gmqtt.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishToClient", clientID, message)
}

// PublishToClient indicates an expected call of PublishToClient
func (mr *MockPublishServiceMockRecorder) PublishToClient(clientID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishToClient", reflect.TypeOf((*MockPublishService)(nil).PublishToClient), clientID, message)
}
