// Code generated by MockGen. DO NOT EDIT.
// Source: publish_service.go

// Package gmqtt is a generated GoMock package.
package gmqtt

import (
	packets "github.com/DrmagicE/gmqtt/pkg/packets"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublishService is a mock of PublishService interface
type MockPublishService struct {
	ctrl     *gomock.Controller
	recorder *MockPublishServiceMockRecorder
}

// MockPublishServiceMockRecorder is the mock recorder for MockPublishService
type MockPublishServiceMockRecorder struct {
	mock *MockPublishService
}

// NewMockPublishService creates a new mock instance
func NewMockPublishService(ctrl *gomock.Controller) *MockPublishService {
	mock := &MockPublishService{ctrl: ctrl}
	mock.recorder = &MockPublishServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublishService) EXPECT() *MockPublishServiceMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPublishService) Publish(message packets.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", message)
}

// Publish indicates an expected call of Publish
func (mr *MockPublishServiceMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublishService)(nil).Publish), message)
}

// PublishToClient mocks base method
func (m *MockPublishService) PublishToClient(clientID string, message packets.Message, match bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishToClient", clientID, message, match)
}

// PublishToClient indicates an expected call of PublishToClient
func (mr *MockPublishServiceMockRecorder) PublishToClient(clientID, message, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishToClient", reflect.TypeOf((*MockPublishService)(nil).PublishToClient), clientID, message, match)
}
