// Code generated by MockGen. DO NOT EDIT.
// Source: hook.go

// Package gmqtt is a generated GoMock package.
package gmqtt

import (
	packets "github.com/DrmagicE/gmqtt/pkg/packets"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnectRequest is a mock of ConnectRequest interface
type MockConnectRequest struct {
	ctrl     *gomock.Controller
	recorder *MockConnectRequestMockRecorder
}

// MockConnectRequestMockRecorder is the mock recorder for MockConnectRequest
type MockConnectRequestMockRecorder struct {
	mock *MockConnectRequest
}

// NewMockConnectRequest creates a new mock instance
func NewMockConnectRequest(ctrl *gomock.Controller) *MockConnectRequest {
	mock := &MockConnectRequest{ctrl: ctrl}
	mock.recorder = &MockConnectRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectRequest) EXPECT() *MockConnectRequestMockRecorder {
	return m.recorder
}

// Packet mocks base method
func (m *MockConnectRequest) Packet() *packets.Connect {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packet")
	ret0, _ := ret[0].(*packets.Connect)
	return ret0
}

// Packet indicates an expected call of Packet
func (mr *MockConnectRequestMockRecorder) Packet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockConnectRequest)(nil).Packet))
}

// DefaultConnackProperties mocks base method
func (m *MockConnectRequest) DefaultConnackProperties() *packets.Properties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultConnackProperties")
	ret0, _ := ret[0].(*packets.Properties)
	return ret0
}

// DefaultConnackProperties indicates an expected call of DefaultConnackProperties
func (mr *MockConnectRequestMockRecorder) DefaultConnackProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultConnackProperties", reflect.TypeOf((*MockConnectRequest)(nil).DefaultConnackProperties))
}

// MockAuthRequest is a mock of AuthRequest interface
type MockAuthRequest struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRequestMockRecorder
}

// MockAuthRequestMockRecorder is the mock recorder for MockAuthRequest
type MockAuthRequestMockRecorder struct {
	mock *MockAuthRequest
}

// NewMockAuthRequest creates a new mock instance
func NewMockAuthRequest(ctrl *gomock.Controller) *MockAuthRequest {
	mock := &MockAuthRequest{ctrl: ctrl}
	mock.recorder = &MockAuthRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthRequest) EXPECT() *MockAuthRequestMockRecorder {
	return m.recorder
}

// Packet mocks base method
func (m *MockAuthRequest) Packet() *packets.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packet")
	ret0, _ := ret[0].(*packets.Auth)
	return ret0
}

// Packet indicates an expected call of Packet
func (mr *MockAuthRequestMockRecorder) Packet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockAuthRequest)(nil).Packet))
}

// ConnectRequest mocks base method
func (m *MockAuthRequest) ConnectRequest() ConnectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectRequest")
	ret0, _ := ret[0].(ConnectRequest)
	return ret0
}

// ConnectRequest indicates an expected call of ConnectRequest
func (mr *MockAuthRequestMockRecorder) ConnectRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectRequest", reflect.TypeOf((*MockAuthRequest)(nil).ConnectRequest))
}
