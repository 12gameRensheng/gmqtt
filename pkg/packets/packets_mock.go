// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/packets/packets.go

// Package packets is a generated GoMock package.
package packets

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Dup mocks base method
func (m *MockMessage) Dup() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dup")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Dup indicates an expected call of Dup
func (mr *MockMessageMockRecorder) Dup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dup", reflect.TypeOf((*MockMessage)(nil).Dup))
}

// Qos mocks base method
func (m *MockMessage) Qos() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qos")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// Qos indicates an expected call of Qos
func (mr *MockMessageMockRecorder) Qos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockMessage)(nil).Qos))
}

// Retained mocks base method
func (m *MockMessage) Retained() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retained")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Retained indicates an expected call of Retained
func (mr *MockMessageMockRecorder) Retained() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retained", reflect.TypeOf((*MockMessage)(nil).Retained))
}

// Topic mocks base method
func (m *MockMessage) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockMessageMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockMessage)(nil).Topic))
}

// PacketID mocks base method
func (m *MockMessage) PacketID() PacketID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PacketID")
	ret0, _ := ret[0].(PacketID)
	return ret0
}

// PacketID indicates an expected call of PacketID
func (mr *MockMessageMockRecorder) PacketID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PacketID", reflect.TypeOf((*MockMessage)(nil).PacketID))
}

// Payload mocks base method
func (m *MockMessage) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockMessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMessage)(nil).Payload))
}

// ContentType mocks base method
func (m *MockMessage) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType
func (mr *MockMessageMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockMessage)(nil).ContentType))
}

// CorrelationData mocks base method
func (m *MockMessage) CorrelationData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrelationData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// CorrelationData indicates an expected call of CorrelationData
func (mr *MockMessageMockRecorder) CorrelationData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrelationData", reflect.TypeOf((*MockMessage)(nil).CorrelationData))
}

// MessageExpiry mocks base method
func (m *MockMessage) MessageExpiry() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageExpiry")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// MessageExpiry indicates an expected call of MessageExpiry
func (mr *MockMessageMockRecorder) MessageExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageExpiry", reflect.TypeOf((*MockMessage)(nil).MessageExpiry))
}

// PayloadFormat mocks base method
func (m *MockMessage) PayloadFormat() PayloadFormat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayloadFormat")
	ret0, _ := ret[0].(PayloadFormat)
	return ret0
}

// PayloadFormat indicates an expected call of PayloadFormat
func (mr *MockMessageMockRecorder) PayloadFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayloadFormat", reflect.TypeOf((*MockMessage)(nil).PayloadFormat))
}

// ResponseTopic mocks base method
func (m *MockMessage) ResponseTopic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseTopic")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResponseTopic indicates an expected call of ResponseTopic
func (mr *MockMessageMockRecorder) ResponseTopic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseTopic", reflect.TypeOf((*MockMessage)(nil).ResponseTopic))
}

// UserProperties mocks base method
func (m *MockMessage) UserProperties() []UserProperty {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProperties")
	ret0, _ := ret[0].([]UserProperty)
	return ret0
}

// UserProperties indicates an expected call of UserProperties
func (mr *MockMessageMockRecorder) UserProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProperties", reflect.TypeOf((*MockMessage)(nil).UserProperties))
}

// TotalBytes mocks base method
func (m *MockMessage) TotalBytes() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalBytes")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// TotalBytes indicates an expected call of TotalBytes
func (mr *MockMessageMockRecorder) TotalBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalBytes", reflect.TypeOf((*MockMessage)(nil).TotalBytes))
}

// MockPacket is a mock of Packet interface
type MockPacket struct {
	ctrl     *gomock.Controller
	recorder *MockPacketMockRecorder
}

// MockPacketMockRecorder is the mock recorder for MockPacket
type MockPacketMockRecorder struct {
	mock *MockPacket
}

// NewMockPacket creates a new mock instance
func NewMockPacket(ctrl *gomock.Controller) *MockPacket {
	mock := &MockPacket{ctrl: ctrl}
	mock.recorder = &MockPacketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPacket) EXPECT() *MockPacketMockRecorder {
	return m.recorder
}

// Pack mocks base method
func (m *MockPacket) Pack(w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pack", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pack indicates an expected call of Pack
func (mr *MockPacketMockRecorder) Pack(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pack", reflect.TypeOf((*MockPacket)(nil).Pack), w)
}

// Unpack mocks base method
func (m *MockPacket) Unpack(r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpack", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpack indicates an expected call of Unpack
func (mr *MockPacketMockRecorder) Unpack(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpack", reflect.TypeOf((*MockPacket)(nil).Unpack), r)
}

// String mocks base method
func (m *MockPacket) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockPacketMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPacket)(nil).String))
}
