// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package gmqtt is a generated GoMock package.
package gmqtt

import (
	context "context"
	retained "github.com/DrmagicE/gmqtt/retained"
	subscription "github.com/DrmagicE/gmqtt/subscription"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// SubscriptionStore mocks base method
func (m *MockServer) SubscriptionStore() subscription.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionStore")
	ret0, _ := ret[0].(subscription.Store)
	return ret0
}

// SubscriptionStore indicates an expected call of SubscriptionStore
func (mr *MockServerMockRecorder) SubscriptionStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionStore", reflect.TypeOf((*MockServer)(nil).SubscriptionStore))
}

// RetainedStore mocks base method
func (m *MockServer) RetainedStore() retained.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainedStore")
	ret0, _ := ret[0].(retained.Store)
	return ret0
}

// RetainedStore indicates an expected call of RetainedStore
func (mr *MockServerMockRecorder) RetainedStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainedStore", reflect.TypeOf((*MockServer)(nil).RetainedStore))
}

// PublishService mocks base method
func (m *MockServer) PublishService() PublishService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishService")
	ret0, _ := ret[0].(PublishService)
	return ret0
}

// PublishService indicates an expected call of PublishService
func (mr *MockServerMockRecorder) PublishService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishService", reflect.TypeOf((*MockServer)(nil).PublishService))
}

// Client mocks base method
func (m *MockServer) Client(clientID string) Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", clientID)
	ret0, _ := ret[0].(Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockServerMockRecorder) Client(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockServer)(nil).Client), clientID)
}

// GetConfig mocks base method
func (m *MockServer) GetConfig() Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockServerMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockServer)(nil).GetConfig))
}

// GetStatsManager mocks base method
func (m *MockServer) GetStatsManager() StatsManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsManager")
	ret0, _ := ret[0].(StatsManager)
	return ret0
}

// GetStatsManager indicates an expected call of GetStatsManager
func (mr *MockServerMockRecorder) GetStatsManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsManager", reflect.TypeOf((*MockServer)(nil).GetStatsManager))
}

// Stop mocks base method
func (m *MockServer) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockServerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop), ctx)
}

// ApplyConfig mocks base method
func (m *MockServer) ApplyConfig(config Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyConfig", config)
}

// ApplyConfig indicates an expected call of ApplyConfig
func (mr *MockServerMockRecorder) ApplyConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfig", reflect.TypeOf((*MockServer)(nil).ApplyConfig), config)
}
