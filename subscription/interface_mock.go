// Code generated by MockGen. DO NOT EDIT.
// Source: subscription/interface.go

// Package subscription is a generated GoMock package.
package subscription

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSubscription is a mock of Subscription interface
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// ShareName mocks base method
func (m *MockSubscription) ShareName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShareName indicates an expected call of ShareName
func (mr *MockSubscriptionMockRecorder) ShareName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareName", reflect.TypeOf((*MockSubscription)(nil).ShareName))
}

// TopicFilter mocks base method
func (m *MockSubscription) TopicFilter() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicFilter")
	ret0, _ := ret[0].(string)
	return ret0
}

// TopicFilter indicates an expected call of TopicFilter
func (mr *MockSubscriptionMockRecorder) TopicFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicFilter", reflect.TypeOf((*MockSubscription)(nil).TopicFilter))
}

// ID mocks base method
func (m *MockSubscription) ID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSubscriptionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSubscription)(nil).ID))
}

// QoS mocks base method
func (m *MockSubscription) QoS() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QoS")
	ret0, _ := ret[0].(byte)
	return ret0
}

// QoS indicates an expected call of QoS
func (mr *MockSubscriptionMockRecorder) QoS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QoS", reflect.TypeOf((*MockSubscription)(nil).QoS))
}

// NoLocal mocks base method
func (m *MockSubscription) NoLocal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoLocal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoLocal indicates an expected call of NoLocal
func (mr *MockSubscriptionMockRecorder) NoLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoLocal", reflect.TypeOf((*MockSubscription)(nil).NoLocal))
}

// RetainAsPublished mocks base method
func (m *MockSubscription) RetainAsPublished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainAsPublished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RetainAsPublished indicates an expected call of RetainAsPublished
func (mr *MockSubscriptionMockRecorder) RetainAsPublished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainAsPublished", reflect.TypeOf((*MockSubscription)(nil).RetainAsPublished))
}

// RetainHandling mocks base method
func (m *MockSubscription) RetainHandling() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainHandling")
	ret0, _ := ret[0].(byte)
	return ret0
}

// RetainHandling indicates an expected call of RetainHandling
func (mr *MockSubscriptionMockRecorder) RetainHandling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainHandling", reflect.TypeOf((*MockSubscription)(nil).RetainHandling))
}

// MockSubOpts is a mock of SubOpts interface
type MockSubOpts struct {
	ctrl     *gomock.Controller
	recorder *MockSubOptsMockRecorder
}

// MockSubOptsMockRecorder is the mock recorder for MockSubOpts
type MockSubOptsMockRecorder struct {
	mock *MockSubOpts
}

// NewMockSubOpts creates a new mock instance
func NewMockSubOpts(ctrl *gomock.Controller) *MockSubOpts {
	mock := &MockSubOpts{ctrl: ctrl}
	mock.recorder = &MockSubOptsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubOpts) EXPECT() *MockSubOptsMockRecorder {
	return m.recorder
}

// QoS mocks base method
func (m *MockSubOpts) QoS() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QoS")
	ret0, _ := ret[0].(byte)
	return ret0
}

// QoS indicates an expected call of QoS
func (mr *MockSubOptsMockRecorder) QoS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QoS", reflect.TypeOf((*MockSubOpts)(nil).QoS))
}

// NoLocal mocks base method
func (m *MockSubOpts) NoLocal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoLocal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoLocal indicates an expected call of NoLocal
func (mr *MockSubOptsMockRecorder) NoLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoLocal", reflect.TypeOf((*MockSubOpts)(nil).NoLocal))
}

// RetainAsPublished mocks base method
func (m *MockSubOpts) RetainAsPublished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainAsPublished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RetainAsPublished indicates an expected call of RetainAsPublished
func (mr *MockSubOptsMockRecorder) RetainAsPublished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainAsPublished", reflect.TypeOf((*MockSubOpts)(nil).RetainAsPublished))
}

// RetainHandling mocks base method
func (m *MockSubOpts) RetainHandling() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainHandling")
	ret0, _ := ret[0].(byte)
	return ret0
}

// RetainHandling indicates an expected call of RetainHandling
func (mr *MockSubOptsMockRecorder) RetainHandling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainHandling", reflect.TypeOf((*MockSubOpts)(nil).RetainHandling))
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockStore) Subscribe(clientID string, subscriptions ...Subscription) SubscribeResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{clientID}
	for _, a := range subscriptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(SubscribeResult)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockStoreMockRecorder) Subscribe(clientID interface{}, subscriptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{clientID}, subscriptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockStore)(nil).Subscribe), varargs...)
}

// Unsubscribe mocks base method
func (m *MockStore) Unsubscribe(clientID string, topics ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{clientID}
	for _, a := range topics {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Unsubscribe", varargs...)
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockStoreMockRecorder) Unsubscribe(clientID interface{}, topics ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{clientID}, topics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockStore)(nil).Unsubscribe), varargs...)
}

// UnsubscribeAll mocks base method
func (m *MockStore) UnsubscribeAll(clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeAll", clientID)
}

// UnsubscribeAll indicates an expected call of UnsubscribeAll
func (mr *MockStoreMockRecorder) UnsubscribeAll(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAll", reflect.TypeOf((*MockStore)(nil).UnsubscribeAll), clientID)
}

// Iterate mocks base method
func (m *MockStore) Iterate(fn IterateFn, options IterationOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Iterate", fn, options)
}

// Iterate indicates an expected call of Iterate
func (mr *MockStoreMockRecorder) Iterate(fn, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockStore)(nil).Iterate), fn, options)
}

// GetStats mocks base method
func (m *MockStore) GetStats() Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(Stats)
	return ret0
}

// GetStats indicates an expected call of GetStats
func (mr *MockStoreMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStore)(nil).GetStats))
}

// GetClientStats mocks base method
func (m *MockStore) GetClientStats(clientID string) (Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientStats", clientID)
	ret0, _ := ret[0].(Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientStats indicates an expected call of GetClientStats
func (mr *MockStoreMockRecorder) GetClientStats(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientStats", reflect.TypeOf((*MockStore)(nil).GetClientStats), clientID)
}

// MockStatsReader is a mock of StatsReader interface
type MockStatsReader struct {
	ctrl     *gomock.Controller
	recorder *MockStatsReaderMockRecorder
}

// MockStatsReaderMockRecorder is the mock recorder for MockStatsReader
type MockStatsReaderMockRecorder struct {
	mock *MockStatsReader
}

// NewMockStatsReader creates a new mock instance
func NewMockStatsReader(ctrl *gomock.Controller) *MockStatsReader {
	mock := &MockStatsReader{ctrl: ctrl}
	mock.recorder = &MockStatsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsReader) EXPECT() *MockStatsReaderMockRecorder {
	return m.recorder
}

// GetStats mocks base method
func (m *MockStatsReader) GetStats() Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(Stats)
	return ret0
}

// GetStats indicates an expected call of GetStats
func (mr *MockStatsReaderMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatsReader)(nil).GetStats))
}

// GetClientStats mocks base method
func (m *MockStatsReader) GetClientStats(clientID string) (Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientStats", clientID)
	ret0, _ := ret[0].(Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientStats indicates an expected call of GetClientStats
func (mr *MockStatsReaderMockRecorder) GetClientStats(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientStats", reflect.TypeOf((*MockStatsReader)(nil).GetClientStats), clientID)
}
