// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package federation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FederationClient is the client API for Federation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederationClient interface {
	Hello(ctx context.Context, in *ClientHello, opts ...grpc.CallOption) (*ServerHello, error)
	EventStream(ctx context.Context, opts ...grpc.CallOption) (Federation_EventStreamClient, error)
}

type federationClient struct {
	cc grpc.ClientConnInterface
}

func NewFederationClient(cc grpc.ClientConnInterface) FederationClient {
	return &federationClient{cc}
}

func (c *federationClient) Hello(ctx context.Context, in *ClientHello, opts ...grpc.CallOption) (*ServerHello, error) {
	out := new(ServerHello)
	err := c.cc.Invoke(ctx, "/gmqtt.federation.api.Federation/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (Federation_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Federation_serviceDesc.Streams[0], "/gmqtt.federation.api.Federation/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &federationEventStreamClient{stream}
	return x, nil
}

type Federation_EventStreamClient interface {
	Send(*Event) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type federationEventStreamClient struct {
	grpc.ClientStream
}

func (x *federationEventStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *federationEventStreamClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FederationServer is the server API for Federation service.
// All implementations must embed UnimplementedFederationServer
// for forward compatibility
type FederationServer interface {
	Hello(context.Context, *ClientHello) (*ServerHello, error)
	EventStream(Federation_EventStreamServer) error
	mustEmbedUnimplementedFederationServer()
}

// UnimplementedFederationServer must be embedded to have forward compatible implementations.
type UnimplementedFederationServer struct {
}

func (UnimplementedFederationServer) Hello(context.Context, *ClientHello) (*ServerHello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedFederationServer) EventStream(Federation_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedFederationServer) mustEmbedUnimplementedFederationServer() {}

// UnsafeFederationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederationServer will
// result in compilation errors.
type UnsafeFederationServer interface {
	mustEmbedUnimplementedFederationServer()
}

func RegisterFederationServer(s grpc.ServiceRegistrar, srv FederationServer) {
	s.RegisterService(&_Federation_serviceDesc, srv)
}

func _Federation_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientHello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmqtt.federation.api.Federation/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationServer).Hello(ctx, req.(*ClientHello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Federation_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FederationServer).EventStream(&federationEventStreamServer{stream})
}

type Federation_EventStreamServer interface {
	Send(*Ack) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type federationEventStreamServer struct {
	grpc.ServerStream
}

func (x *federationEventStreamServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *federationEventStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Federation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmqtt.federation.api.Federation",
	HandlerType: (*FederationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Federation_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Federation_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "federation.proto",
}
